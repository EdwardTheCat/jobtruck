<?php

namespace App\Controller;

use App\Entity\Job;
use App\Repository\JobRepository;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\DateTime;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

class JobController extends AbstractController
{
    /**
     * @Route("/admin/job/create", name="createJob")
     * @Route("/admin/job/edit/{id}", name="editJob")
     */
    public function createJob(Job $job=null, Request $request, ObjectManager $manager )
    {
        if (is_null($job))
            $job = new Job();

        if($request->get('_route')=="jobEdit"){
            $oldfilename=$contact->getLogo();
        }

        $formJob = $this->createFormBuilder($job)
                        ->add('title',TextType::class, array('label' => 'Titre'))
                        ->add('description',TextareaType::class)
                        ->add('contact',EmailType::class)
                        ->add('logo', FileType::class, array(
                            'label' => 'Logo de l\'entreprise', 
                            'data_class' => null,
                            'empty_data' => 'empty_logo',
                            'required' => true
                            ))
                        ->add('validity')
        ->getForm();

        $formJob->handleRequest($request);
        if ($formJob->isSubmitted() && $formJob->isValid()) {

            // $file stores the uploaded PDF file
                /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
                
                $file = $formJob->get('logo')->getData();
                
                if(is_null($file) or $file=="empty_logo")
                    if($route=="jobEdit") { $user->setAvatar($oldfilename);}
                    else{$user->setAvatar('logo_base.png');}
                else{
                    $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

                    // moves the file to the directory where brochures are stored
                    $file->move(
                        $this->getParameter('logo_directory'),
                        $fileName
                    );
                    // updates the 'user' property to store the PDF file name
                    // instead of its contents
                    $job->setLogo($fileName);
                }
                
            $job->setCreatedAT(new \DateTime());

            $manager->persist($job);
            $manager->flush();
       
            return $this->redirectToRoute('listJob');
        }
        return $this->render('job/job.html.twig',[
            'form' => $formJob->createView(),
            'action' => is_null($job->getId())
        ]);
    }

    /**
     * @Route("/admin/job/listJob", name="listJob")
     */
    public function listJob(JobRepository $repo)
    {
        $jobs  =$repo->findAll();
        return $this->render('job/listJob.html.twig',[

            'jobs'  => $jobs
        ]);
    }

    /**
    * @Route("admin/job/delete/{id}", name="deleteJob")
    */ 
    public function delete(ObjectManager $manager, Job $job) {
        $manager->remove($job);
        $manager->flush();
        return $this->redirectToRoute("listJob");  
    }

     /**
     * @Route("/admin/job/{id}", name="jobDetails", requirements={"id"="\d+"})
     */
    public function DetailsJob($id, JobRepository $repo )
    {
        $job=$repo->findOneById($id);
        return $this->render('job/jobDetails.html.twig', [
            'job' => $job
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

}
